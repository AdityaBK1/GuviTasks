                      
                                  HTTP1.1

Version 1.1 of HTTP was released in 1997, only one year after the previous version 1.0. HTTP 1.1 is an enhancement of HTTP 1.0, providing several extensions.

Among the most relevant enhancements, we can cite the following:

Host header:HTTP 1.1 requires it by the specification. The host header is specially important to route messages through proxy servers, allowing to distinguish domains that point to the same IP

Persistent connections: In HTTP 1.1, it is possible to execute several requests using a single connection

Continue status: to avoid servers refusing unprocessable requests,  now clients can first send only the request headers and check if they receive a continue status code (100) 

New methods:The 1.1 version added six extra methods: PUT, PATCH, DELETE, CONNECT, TRACE, and OPTIONS

                       
                                   HTTP2
                
HTTP version 2.0 was officially released in 2015, about eighteen years after the HTTP 1.1. Particularly, HTTP 2.0 focused on improving the protocol performance.

To do that, HTTP 2.0 implemented several features to improve connections and data exchange. Let’s see some of them:

Request multiplexing: HTTP 1.1 is a sequential protocol. So, we can send a single request at a time. HTTP 2.0, in turn, allows to send requests and receive responses asynchronously. In this way, we can do multiple requests at the same time using a single connection

Request prioritization: with HTTP 2.0, we can set a numeric prioritization in a batch of requests. Thus, we can be explicit in which order we expect the responses, such as getting a webpage CSS before its JS files

Automatic compressing: in the previous version of HTTP (1.1), we must explicitly require the compression of requests and responses. HTTP 2.0, however, executes a GZip compression automatically

Connection reset: a functionality that allows closing a connection between a server and a client for some reason, thus immediately opening a new one

Server push: to avoid a server receiving lots of requests, HTTP 2.0 introduced a server push functionality. With that, the server tries to predict the resources that will be requested soon. So, the server proactively pushes these resources to the client cache


--------------------------------------------------------------------------------------------


                                 Objects and its Internal representation(Js)

Objects are used to store keyed collections of various data and more complex entities.

An object can be created with figure brackets {…} with an optional list of properties. A property is a “key: value” pair, where key is a string (also called a “property name”), and value can be anything.

We can imagine an object as a cabinet with signed files. Every piece of data is stored in its file by the key. It’s easy to find a file by its name or add/remove a file.

Eg:
let user = {     
  name: "Raj",  
  age: 9       
};

Property values are accessible using the dot notation:
alert( user.name ); 
alert( user.age );

To remove a property, we can use delete operator:
delete user.age;


Create JavaScript Object with Constructor
Constructor is nothing but a function and with help of new keyword, constructor function allows to create multiple objects of same flavor as shown below

Eg:
function Vehicle(company, maker) {
   this.company = company;
   this.maker = maker;
}
let company1 = new Vehicle(’Apple’, 'Zomato’);
let company2 = new Vehicle(’Paypal’, 'Paytm’)
console.log(car1.company1);   
console.log(car2.company2);    